cscope 15 $HOME/workspace/weiss/solution/ch04 -q 0000000273 0000029372
	@avltree.c

1 
	~"av…ªe.h
"

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<m©h.h
>

5 
	~"Áèl.h
"

6 
	~"que.h
"

7 
	~"°ack.h
"

9 
	#DIST_MAX
 (100)

	)

11 
	sAvlNode


13 
li°_hód_t
 
	mLi°
;

15 
	mHeight
;

16 
	mDi°
;

17 
	mDïth
;

19 
EÀmítTy≥
 
	mEÀmít
;

20 
AvlTªe
 
	mLe·
;

21 
AvlTªe
 
	mRight
;

22 } 
	tAvlNode_t
;

24 
AvlTªe
 
	$MakeEm±y
–
AvlTªe
 
T
 )

26 if–
T
 !
NULL
 )

28 
	`MakeEm±y
–
T
->
Le·
 );

29 
	`MakeEm±y
–
T
->
Right
 );

30 
	`‰ì
–
T
 );

32  
NULL
;

33 
	}
}

35 
Posôi⁄
 
	$Föd
–
EÀmítTy≥
 
X
, 
AvlTªe
 
T
 )

37 if–
T
 =
NULL
 )

38  
NULL
;

39 if–
X
 < 
T
->
EÀmít
 )

40  
	`Föd
–
X
, 
T
->
Le·
 );

42 if–
X
 > 
T
->
EÀmít
 )

43  
	`Föd
–
X
, 
T
->
Right
 );

45  
T
;

46 
	}
}

48 
Posôi⁄
 
	$FödMö
–
AvlTªe
 
T
 )

50 if–
T
 =
NULL
 )

51  
NULL
;

53 if–
T
->
Le·
 =
NULL
 )

54  
T
;

56  
	`FödMö
–
T
->
Le·
 );

57 
	}
}

59 
Posôi⁄
 
	$FödMax
–
AvlTªe
 
T
 )

61 if–
T
 !
NULL
 )

62  
T
->
Right
 !
NULL
 )

63 
T
 = T->
Right
;

65  
T
;

66 
	}
}

68 
	$Height
–
Posôi⁄
 
P
 )

70 if–
P
 =
NULL
 )

73  
P
->
Height
;

74 
	}
}

76 
	$Max
–
Lhs
, 
Rhs
 )

78  
Lhs
 > 
Rhs
 ? Lhs : Rhs;

79 
	}
}

90 
Posôi⁄
 
	$SögÀRŸ©eWôhLe·
–
Posôi⁄
 
K2
 )

92 
Posôi⁄
 
K1
;

94 
K1
 = 
K2
->
Le·
;

95 
K2
->
Le·
 = 
K1
->
Right
;

96 
K1
->
Right
 = 
K2
;

98 
K2
->
Height
 = 
	`Max
–
	`Height
–K2->
Le·
 ), Height–K2->
Right
 ) ) + 1;

99 
K1
->
Height
 = 
	`Max
–
	`Height
–K1->
Le·
 ), 
K2
->Height ) + 1;

101  
K1
;

102 
	}
}

113 
Posôi⁄
 
	$SögÀRŸ©eWôhRight
–
Posôi⁄
 
K1
 )

115 
Posôi⁄
 
K2
;

117 
K2
 = 
K1
->
Right
;

118 
K1
->
Right
 = 
K2
->
Le·
;

119 
K2
->
Le·
 = 
K1
;

121 
K1
->
Height
 = 
	`Max
–
	`Height
–K1->
Le·
 ), Height–K1->
Right
 ) ) + 1;

122 
K2
->
Height
 = 
	`Max
–
	`Height
–K2->
Right
 ), 
K1
->Height ) + 1;

124  
K2
;

125 
	}
}

139 
Posôi⁄
 
	$DoubÀRŸ©eWôhLe·
–
Posôi⁄
 
K3
 )

142 
K3
->
Le·
 = 
	`SögÀRŸ©eWôhRight
( K3->Left );

145  
	`SögÀRŸ©eWôhLe·
–
K3
 );

146 
	}
}

160 
Posôi⁄
 
	$DoubÀRŸ©eWôhRight
–
Posôi⁄
 
K1
 )

163 
K1
->
Right
 = 
	`SögÀRŸ©eWôhLe·
( K1->Right );

166  
	`SögÀRŸ©eWôhRight
–
K1
 );

167 
	}
}

170 
AvlTªe
 
	$In£π
–
EÀmítTy≥
 
X
, 
AvlTªe
 
T
 )

172 if–
T
 =
NULL
 )

175 
T
 = 
	`mÆloc
––
AvlNode
 ) );

176 if–
T
 =
NULL
 )

177 
	`F©ÆEº‹
( "Out of space!!!" );

180 
T
->
EÀmít
 = 
X
; T->
Height
 = 0;

181 
T
->
Le·
 = T->
Right
 = 
NULL
;

186 if–
X
 < 
T
->
EÀmít
 )

188 
T
->
Le·
 = 
	`In£π
–
X
, T->Left );

189 if–
	`Height
–
T
->
Le·
 ) - Height–T->
Right
 ) == 2 )

190 if–
X
 < 
T
->
Le·
->
EÀmít
 )

191 
T
 = 
	`SögÀRŸ©eWôhLe·
( T );

193 
T
 = 
	`DoubÀRŸ©eWôhLe·
( T );

197 if–
X
 > 
T
->
EÀmít
 )

199 
T
->
Right
 = 
	`In£π
–
X
, T->Right );

200 if–
	`Height
–
T
->
Right
 ) - Height–T->
Le·
 ) == 2 )

201 if–
X
 > 
T
->
Right
->
EÀmít
 )

202 
T
 = 
	`SögÀRŸ©eWôhRight
( T );

204 
T
 = 
	`DoubÀRŸ©eWôhRight
( T );

210 
T
->
Height
 = 
	`Max
–
	`Height
–T->
Le·
 ), Height–T->
Right
 ) ) + 1;

211  
T
;

212 
	}
}

214 
AvlTªe
 
	$Cª©eNewNode
(
EÀmítTy≥
 
X
)

216 
AvlTªe
 
T
;

218 i‡(!(
T
 = 
	`mÆloc
((
AvlNode
)))) {

219 
	`F©ÆEº‹
("Out of space!!!");

221 
T
->
EÀmít
 = 
X
; T->
Height
 = 0;

222 
T
->
Le·
 = T->
Right
 = 
NULL
;

225  
T
;

226 
	}
}

232 
AvlTªe
 
	$Lo›In£π
(
EÀmítTy≥
 
X
, 
AvlTªe
 
T
)

234 
°ack_t
 
S
;

235 
AvlTªe
 
P
, 
Q
;

236 
IsRŸ©e
 = 
FALSE
;

238 
	`°ack_öô
(&
S
, "ö£πi⁄Ö©h sèck", 
	`off£t_of
(
AvlNode_t
, 
Li°
));

240 
T
) {

241 i‡(
X
 < 
T
->
EÀmít
) {

242 
	`push
(&
S
, 
T
);

243 
T
 = T->
Le·
;

244 } i‡(
X
 > 
T
->
EÀmít
) {

245 
	`push
(&
S
, 
T
);

246 
T
 = T->
Right
;

252 i‡(
T
 =
NULL
) {

253 i‡(!(
T
 = 
	`mÆloc
((
AvlNode
)))) {

254 
	`F©ÆEº‹
("Out of space!!!");

255  
NULL
;

258 
T
->
EÀmít
 = 
X
; T->
Height
 = 0;

259 
T
->
Le·
 = T->
Right
 = 
NULL
;

260 i‡((
Q
 = 
	`p›
(&
S
))) {

261 i‡(
T
->
EÀmít
 < 
Q
->Element)

262 
Q
->
Le·
 = 
T
;

264 
Q
->
Right
 = 
T
;

265 
	`push
(&
S
, 
Q
);

267 
	`push
(&
S
, 
T
);

270 (
T
 = 
	`p›
(&
S
))) {

271 
T
->
Height
 = 
	`Max
(
	`Height
(T->
Le·
), Height(T->
Right
)) + 1;

272 i‡(
X
 < 
T
->
EÀmít
) {

273 i‡(
	`Height
(
T
->
Le·
Ë- Height(T->
Right
) == 2) {

274 i‡(
X
 < 
T
->
Le·
->
EÀmít
)

275 
T
 = 
	`SögÀRŸ©eWôhLe·
(T);

277 
T
 = 
	`DoubÀRŸ©eWôhLe·
(T);

278 
IsRŸ©e
 = 
TRUE
;

280 } i‡(
X
 > 
T
->
EÀmít
) {

281 i‡(
	`Height
(
T
->
Right
Ë- Height(T->
Le·
) == 2) {

282 if(
X
 > 
T
->
Right
->
EÀmít
)

283 
T
 = 
	`SögÀRŸ©eWôhRight
(T);

285 
T
 = 
	`DoubÀRŸ©eWôhRight
(T);

286 
IsRŸ©e
 = 
TRUE
;

289 i‡(
IsRŸ©e
 =
TRUE
) {

290 
IsRŸ©e
 = 
FALSE
;

291 i‡((
Q
 = 
	`p›
(&
S
))) {

292 i‡(
T
->
EÀmít
 < 
Q
->Element)

293 
Q
->
Le·
 = 
T
;

295 
Q
->
Right
 = 
T
;

296 
	`push
(&
S
, 
Q
);

299 
P
 = 
T
;

302  
P
;

303 
	}
}

306 
	$CompuãDi°AndDïth
–
AvlTªe
 
T
 )

308 
que_t
 
que
;

309 
Dïth
, 
Di°
;

311 i‡(
T
 =
NULL
)

314 
	`que_öô
(&
que
, "av…ªêque", 
	`off£t_of
(
AvlNode_t
, 
Li°
));

316 
T
->
Di°
 = 
DIST_MAX
;

317 
T
->
Dïth
 = 0;

318 
	`íqueue
(&
que
, 
T
);

320 (
T
 = 
	`dequeue
(&
que
))) {

321 i‡(
T
->
Le·
) {

322 
T
->
Le·
->
Dïth
 = T->Depth + 1;

323 
T
->
Le·
->
Di°
 = T->Di° - 
	`round
(
DIST_MAX
/
	`pow
(2, T->Le·->
Dïth
));

324 
	`íqueue
(&
que
, 
T
->
Le·
);

326 i‡(
T
->
Right
) {

327 
T
->
Right
->
Dïth
 = T->Depth + 1;

328 
T
->
Right
->
Di°
 = T->Di° + 
	`round
(
DIST_MAX
/
	`pow
(2, T->Right->
Dïth
));

329 
	`íqueue
(&
que
, 
T
->
Right
);

332 
	}
}

335 
AvlTªe
 
	$Dñëe
–
EÀmítTy≥
 
X
, 
AvlTªe
 
T
 )

337 
Posôi⁄
 
TmpCñl
;

339 i‡(
T
 =
NULL
) {

340 
	`Eº‹
("ElementÇot found");

341  
T
;

344 i‡(
X
 < 
T
->
EÀmít
) {

345 
T
->
Le·
 = 
	`Dñëe
(
X
, T->Left);

346 i‡(
	`Height
(
T
->
Right
Ë- Height(T->
Le·
) == 2) {

347 i‡(
	`Height
(
T
->
Right
->RightË> Height(T->Right->
Le·
))

348 
T
 = 
	`SögÀRŸ©eWôhRight
(T);

350 
T
 = 
	`DoubÀRŸ©eWôhRight
(T);

352 } i‡(
X
 > 
T
->
EÀmít
) {

353 
T
->
Right
 = 
	`Dñëe
(
X
, T->Right);

354 i‡(
	`Height
(
T
->
Le·
Ë- Height(T->
Right
) == 2) {

355 i‡(
	`Height
(
T
->
Le·
->Le·Ë> Height(T->Le·->
Right
))

356 
T
 = 
	`SögÀRŸ©eWôhLe·
(T);

358 
T
 = 
	`DoubÀRŸ©eWôhLe·
(T);

360 } i‡(
T
->
Le·
 && T->
Right
) {

361 
TmpCñl
 = 
	`FödMö
(
T
->
Right
);

362 
T
->
EÀmít
 = 
TmpCñl
->Element;

363 
T
->
Right
 = 
	`Dñëe
(T->
EÀmít
, T->Right);

364 i‡(
	`Height
(
T
->
Le·
Ë- Height(T->
Right
) == 2) {

365 i‡(
	`Height
(
T
->
Le·
->Le·Ë> Height(T->Le·->
Right
))

366 
T
 = 
	`SögÀRŸ©eWôhLe·
(T);

368 
T
 = 
	`DoubÀRŸ©eWôhLe·
(T);

371 
TmpCñl
 = 
T
;

372 i‡(
T
->
Le·
 =
NULL
)

373 
T
 = T->
Right
;

374 i‡(
T
->
Right
 =
NULL
)

375 
T
 = T->
Le·
;

376 
	`‰ì
(
TmpCñl
);

379 i‡(
T
)

380 
T
->
Height
 = 
	`Max
(
	`Height
(T->
Le·
), Height(T->
Right
)) + 1;

382  
T
;

383 
	}
}

385 
EÀmítTy≥
 
	$Rërõve
–
Posôi⁄
 
P
 )

387  
P
->
EÀmít
;

388 
	}
}

391 
	#NR_DEPTH_MAX
 256

	)

392 
	g__LAST
[
NR_DEPTH_MAX
];

394 
	$li°_dú
(
AvlTªe
 
T
)

396 
i
;

398 
i
 = 0; i < 
T
->
Dïth
; ++i) {

399 i‡(
i
 =
T
->
Dïth
 - 1)

400 
	`¥ötf
("%s", 
__LAST
[
i
] ? "`-- " : "|-- ");

402 
	`¥ötf
("%s", 
__LAST
[
i
] ? " " : "| ");

404 
	`¥ötf
("%d\n", 
T
->
EÀmít
);

406 i‡(!
T
->
Le·
 && !T->
Right
) {

408 } i‡(
T
->
Le·
 && !T->
Right
) {

409 
__LAST
[
T
->
Dïth
] = 1;

410 
	`li°_dú
(
T
->
Le·
);

411 } i‡(!
T
->
Le·
 && T->
Right
) {

412 
__LAST
[
T
->
Dïth
] = 1;

413 
	`li°_dú
(
T
->
Right
);

415 
__LAST
[
T
->
Dïth
] = 0;

416 
	`li°_dú
(
T
->
Le·
);

417 
__LAST
[
T
->
Dïth
] = 1;

418 
	`li°_dú
(
T
->
Right
);

420 
	}
}

422 
	$VPrötAvlTªe
(
AvlTªe
 
T
)

424 i‡(
T
)

425 
	`li°_dú
(
T
);

426 
	}
}

428 
öt32_t
 
	gDEPTH
 = 0;

429 
öt32_t
 
	gDIST
 = 0;

430 
öt32_t
 
	gWIDTH
 = 0;

431 
	gBUF
[1024] = {0};

432 
öt32_t
 
	gBUF_POS
 = 0;

434 
ölöe
 
öt32_t
 
	$CompuãWidth
(
öt32_t
 
X
)

436 
öt32_t
 
width
 = 0;

438 i‡(
X
 < 0) {

439 
X
 = -X;

440 ++
width
;

443 ++
width
;

444 } (
X
 /= 10) > 0);

446  
width
;

447 
	}
}

449 
	$PrötNode
(
AvlTªe
 
T
)

451 
öt32_t
 
i
;

453 i‡(
T
->
Dïth
 !
DEPTH
) {

454 
	`¥ötf
("\n");

455 
DIST
 = 
T
->
Di°
;

456 
BUF
[
BUF_POS
++] = '\n';

457 
BUF
[
BUF_POS
] = '\0';

458 
	`¥ötf
("%s", 
BUF
);

460 
BUF_POS
 = 0;

462 
DIST
 = 
T
->
Di°
 - DIST - 
WIDTH
;

465 
i
 = 0; i < 
DIST
; ++i)

466 
	`¥ötf
(" ");

467 
	`¥ötf
("%d", 
T
->
EÀmít
);

469 
DIST
 = 
T
->
Di°
;

470 
DEPTH
 = 
T
->
Dïth
;

471 
WIDTH
 = 
	`CompuãWidth
(
T
->
EÀmít
);

473 i‡(
T
->
Le·
 && !T->
Right
) {

474  ; 
BUF_POS
 < 
T
->
Le·
->
Di°
; ++BUF_POS) {

475 
BUF
[
BUF_POS
] = ' ';

477 
BUF
[
BUF_POS
++] = '/';

478  ; 
BUF_POS
 < 
T
->
Di°
; ++BUF_POS) {

479 
BUF
[
BUF_POS
] = '-';

481 
BUF
[
BUF_POS
++] = '|';

482 } i‡(!
T
->
Le·
 && T->
Right
) {

483  ; 
BUF_POS
 < 
T
->
Di°
; ++BUF_POS) {

484 
BUF
[
BUF_POS
] = ' ';

486 
BUF
[
BUF_POS
++] = '|';

487  ; 
BUF_POS
 < 
T
->
Right
->
Di°
; ++BUF_POS) {

488 
BUF
[
BUF_POS
] = '-';

490 
BUF
[
BUF_POS
++] = '\\';

491 } i‡(
T
->
Le·
 && T->
Right
) {

492  ; 
BUF_POS
 < 
T
->
Le·
->
Di°
; ++BUF_POS) {

493 
BUF
[
BUF_POS
] = ' ';

495 
BUF
[
BUF_POS
++] = '/';

496  ; 
BUF_POS
 < 
T
->
Di°
; ++BUF_POS) {

497 
BUF
[
BUF_POS
] = '-';

499 
BUF
[
BUF_POS
++] = '|';

500  ; 
BUF_POS
 < 
T
->
Right
->
Di°
; ++BUF_POS) {

501 
BUF
[
BUF_POS
] = '-';

503 
BUF
[
BUF_POS
++] = '\\';

507 
	}
}

509 
	$HPrötAvlTªe
(
AvlTªe
 
T
)

511 
que_t
 
que
;

513 i‡(
T
 =
NULL
)

516 
	`que_öô
(&
que
, "av…ªêque", 
	`off£t_of
(
AvlNode_t
, 
Li°
));

517 
	`íqueue
(&
que
, 
T
);

519 (
T
 = 
	`dequeue
(&
que
))) {

520 
	`PrötNode
(
T
);

521 i‡(
T
->
Le·
)

522 
	`íqueue
(&
que
, 
T
->
Le·
);

523 i‡(
T
->
Right
)

524 
	`íqueue
(&
que
, 
T
->
Right
);

527 
	`¥ötf
("\n");

530 
	}
}

	@avltree.h

1 
	tEÀmítTy≥
;

3 #i‚de‡
_AvlTªe_H


4 
	#_AvlTªe_H


	)

6 
	gAvlNode
;

7 
AvlNode
 *
	tPosôi⁄
;

8 
AvlNode
 *
	tAvlTªe
;

10 
AvlTªe
 
MakeEm±y
–AvlTªê
T
 );

11 
Posôi⁄
 
Föd
–
EÀmítTy≥
 
X
, 
AvlTªe
 
T
 );

12 
Posôi⁄
 
FödMö
–
AvlTªe
 
T
 );

13 
Posôi⁄
 
FödMax
–
AvlTªe
 
T
 );

14 
AvlTªe
 
In£π
–
EÀmítTy≥
 
X
, AvlTªê
T
 );

15 
AvlTªe
 
Lo›In£π
–
EÀmítTy≥
 
X
, AvlTªê
T
 );

16 
AvlTªe
 
Dñëe
–
EÀmítTy≥
 
X
, AvlTªê
T
 );

17 
EÀmítTy≥
 
Rërõve
–
Posôi⁄
 
P
 );

18 
CompuãDi°AndDïth
–
AvlTªe
 
T
 );

19 
VPrötAvlTªe
(
AvlTªe
 
T
);

20 
HPrötAvlTªe
(
AvlTªe
 
T
);

	@fatal.h

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	#Eº‹
–
Så
 ) 
	`F©ÆEº‹
–Så )

	)

5 
	#F©ÆEº‹
–
Så
 ) 
	`Ârötf
–
°dîr
, "%s\n", Så ), 
	`exô
–1 )

	)

	@list.h

1 #i‚de‡
_LIST_H


2 
	#_LIST_H


	)

5 
	~<°dio.h
>

18 
	sli°_hód
 {

19 
li°_hód
 *
	m√xt
, *
	m¥ev
;

22 
li°_hód
 
	tli°_hód_t
;

24 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

26 
	#LIST_HEAD
(
«me
) \

27 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

29 
	#INIT_LIST_HEAD
(
±r
) do { \

30 (
±r
)->
√xt
 = (±r); (±r)->
¥ev
 = (ptr); \

31 } 0)

	)

41 
__ölöe__
 
	$__li°_add
(
li°_hód
 * 
_√w
,

42 
li°_hód
 * 
_¥ev
,

43 
li°_hód
 * 
_√xt
)

45 
_√xt
->
¥ev
 = 
_√w
;

46 
_√w
->
√xt
 = 
_√xt
;

47 
_√w
->
¥ev
 = 
_¥ev
;

48 
_¥ev
->
√xt
 = 
_√w
;

49 
	}
}

51 
	#__li°_add
(
_√w
, 
_¥ev
, 
_√xt
) do { \

52 
li°_hód
 *
__√w
 = 
_√w
; \

53 
li°_hód
 *
__¥ev
 = 
_¥ev
; \

54 
li°_hód
 *
__√xt
 = 
_√xt
; \

56 (
__√xt
)->
¥ev
 = (
__√w
); \

57 (
__√w
)->
√xt
 = (
__√xt
); \

58 (
__√w
)->
¥ev
 = (
__¥ev
); \

59 (
__¥ev
)->
√xt
 = (
__√w
); \

60 } 0)

	)

73 
__ölöe__
 
	$li°_add
(
li°_hód
 *
_√w
, li°_hód *
_hód
)

75 
	`__li°_add
(
_√w
, 
_hód
, _hód->
√xt
);

76 
	}
}

78 
	#li°_add
(
_√w
, 
_hód
) do { \

79 
	`__li°_add
(
_√w
, 
_hód
, (_hód)->
√xt
); \

80 } 0)

	)

93 
__ölöe__
 
	$li°_add_èû
(
li°_hód
 *
_√w
, li°_hód *
_hód
)

95 
	`__li°_add
(
_√w
, 
_hód
->
¥ev
, _head);

96 
	}
}

98 
	#li°_add_èû
(
_√w
, 
_hód
) do { \

99 
	`__li°_add
(
_√w
, (
_hód
)->
¥ev
, _head); \

100 } 0)

	)

112 
__ölöe__
 
	$__li°_dñ
(
li°_hód
 * 
_¥ev
,

113 
li°_hód
 * 
_√xt
)

115 
_√xt
->
¥ev
 = 
_¥ev
;

116 
_¥ev
->
√xt
 = 
_√xt
;

117 
	}
}

119 
	#__li°_dñ
(
_¥ev
, 
_√xt
) do { \

120 
li°_hód
 *
__¥ev
 = 
_¥ev
; \

121 
li°_hód
 *
__√xt
 = 
_√xt
; \

123 (
__√xt
)->
¥ev
 = (
__¥ev
); \

124 (
__¥ev
)->
√xt
 = (
__√xt
); \

125 } 0)

	)

135 
__ölöe__
 
	$li°_dñ
(
li°_hód
 *
_íåy
)

137 
	`__li°_dñ
(
_íåy
->
¥ev
, _íåy->
√xt
);

138 
_íåy
->
√xt
 = _íåy->
¥ev
 = 0;

139 
	}
}

141 
	#li°_dñ
(
_íåy
) do { \

142 
	`__li°_dñ
((
_íåy
)->
¥ev
, (_íåy)->
√xt
); \

143 (
_íåy
)->
√xt
 = (_íåy)->
¥ev
 = 0; \

144 } 0)

	)

153 
__ölöe__
 
	$li°_dñ_öô
(
li°_hód
 *
_íåy
)

155 
	`__li°_dñ
(
_íåy
->
¥ev
, _íåy->
√xt
);

156 
	`INIT_LIST_HEAD
(
_íåy
);

157 
	}
}

159 
	#li°_dñ_öô
(
_íåy
) do { \

160 
	`__li°_dñ
((
_íåy
)->
¥ev
, (_íåy)->
√xt
); \

161 
	`INIT_LIST_HEAD
(
_íåy
); \

162 } 0)

	)

171 
__ölöe__
 
	$li°_em±y
(
li°_hód
 *
_hód
)

173  
_hód
->
√xt
 == _head;

174 
	}
}

176 
	#li°_em±y
(
_hód
) \

177 –(
_hód
)->
√xt
 =(_hódË)

	)

181 
__ölöe__
 
	$li°_em±y_⁄e
(
li°_hód
 *
_hód
)

183  
_hód
->
√xt
 =_hód->
¥ev
 && _head->next != _head &&

184 
_hód
->
√xt
->√xà=_hód && _hód->√xt->
¥ev
 == _head;

185 
	}
}

193 
__ölöe__
 
	$li°_•li˚
(
li°_hód
 *
li°
, li°_hód *
hód
)

195 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

197 i‡(
fú°
 !
li°
) {

198 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

199 
li°_hód
 *
©
 = 
hód
->
√xt
;

201 
fú°
->
¥ev
 = 
hód
;

202 
hód
->
√xt
 = 
fú°
;

204 
œ°
->
√xt
 = 
©
;

205 
©
->
¥ev
 = 
œ°
;

207 
	}
}

209 
	#off£t_of
(
TYPE
, 
MEMBER
Ë((Ë&((TYPE *)0)->MEMBER)

	)

218 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) \

219 ((
ty≥
 *)((*)(
±r
Ë- ()(&(—y≥ *)0)->
membî
)))

	)

227 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

228 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

236 
	#li°_f‹_óch
(
pos
, 
hód
) \

237 
pos
 = (
hód
)->
√xt
;Öos != (head); \

238 
pos
 =Öos->
√xt
)

	)

240 
	#li°_f‹_óch_ªvî£
(
pos
, 
hód
) \

241 
pos
 = (
hód
)->
¥ev
;Öos != (head); \

242 
pos
 =Öos->
¥ev
)

	)

251 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

252 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

253 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

255 
	#li°_f‹_óch_ß„_ªvî£
(
pos
, 
n
, 
hód
) \

256 
pos
 = (
hód
)->
¥ev
, 
n
 =Öos->prev;Öos != (head); \

257 
pos
 = 
n
,Ç =Öos->
¥ev
)

	)

267 
	shli°_hód
 {

268 
hli°_node
 *
	mfú°
;

271 
	shli°_node
 {

272 
hli°_node
 *
	m√xt
, **
	mµªv
;

275 
	#HLIST_HEAD_INIT
 { .
fú°
 = 
NULL
 }

	)

276 
	#HLIST_HEAD
(
«me
Ë
hli°_hód
Çamê{ .
fú°
 = 
NULL
 }

	)

277 
	#INIT_HLIST_HEAD
(
±r
Ë(’å)->
fú°
 = 
NULL
)

	)

278 
ölöe
 
	$INIT_HLIST_NODE
(
hli°_node
 *
h
)

280 
h
->
√xt
 = 
NULL
;

281 
h
->
µªv
 = 
NULL
;

282 
	}
}

284 
ölöe
 
	$hli°_unhashed
(c⁄° 
hli°_node
 *
h
)

286  !
h
->
µªv
;

287 
	}
}

289 
ölöe
 
	$hli°_em±y
(c⁄° 
hli°_hód
 *
h
)

291  !
h
->
fú°
;

292 
	}
}

294 
ölöe
 
	$__hli°_dñ
(
hli°_node
 *
n
)

296 
hli°_node
 *
√xt
 = 
n
->next;

297 
hli°_node
 **
µªv
 = 
n
->pprev;

298 *
µªv
 = 
√xt
;

299 i‡(
√xt
)

300 
√xt
->
µªv
 =Öprev;

301 
	}
}

303 
ölöe
 
	$hli°_dñ
(
hli°_node
 *
n
)

305 
	`__hli°_dñ
(
n
);

306 
n
->
√xt
 = 0;

307 
n
->
µªv
 = 0;

308 
	}
}

310 
ölöe
 
	$hli°_dñ_öô
(
hli°_node
 *
n
)

312 i‡(!
	`hli°_unhashed
(
n
)) {

313 
	`__hli°_dñ
(
n
);

314 
	`INIT_HLIST_NODE
(
n
);

316 
	}
}

318 
ölöe
 
	$hli°_add_hód
(
hli°_node
 *
n
, 
hli°_hód
 *
h
)

320 
hli°_node
 *
fú°
 = 
h
->first;

321 
n
->
√xt
 = 
fú°
;

322 i‡(
fú°
)

323 
fú°
->
µªv
 = &
n
->
√xt
;

324 
h
->
fú°
 = 
n
;

325 
n
->
µªv
 = &
h
->
fú°
;

326 
	}
}

329 
ölöe
 
	$hli°_add_bef‹e
(
hli°_node
 *
n
,

330 
hli°_node
 *
√xt
)

332 
n
->
µªv
 = 
√xt
->pprev;

333 
n
->
√xt
 =Çext;

334 
√xt
->
µªv
 = &
n
->next;

335 *(
n
->
µªv
) =Ç;

336 
	}
}

338 
ölöe
 
	$hli°_add_a·î
(
hli°_node
 *
n
,

339 
hli°_node
 *
√xt
)

341 
√xt
->√xà
n
->next;

342 
n
->
√xt
 =Çext;

343 
√xt
->
µªv
 = &
n
->next;

345 if(
√xt
->next)

346 
√xt
->√xt->
µªv
 = &next->next;

347 
	}
}

353 
ölöe
 
	$hli°_move_li°
(
hli°_hód
 *
ﬁd
,

354 
hli°_hód
 *
√w
)

356 
√w
->
fú°
 = 
ﬁd
->first;

357 i‡(
√w
->
fú°
)

358 
√w
->
fú°
->
µªv
 = &new->first;

359 
ﬁd
->
fú°
 = 
NULL
;

360 
	}
}

362 
	#hli°_íåy
(
±r
, 
ty≥
, 
membî
) \

363 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

365 
	#hli°_f‹_óch
(
pos
, 
hód
) \

366 
pos
 = (
hód
)->
fú°
;Öo†;Öo†pos->
√xt
)

	)

368 
	#hli°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

369 
pos
 = (
hód
)->
fú°
;Öo†&& ({ 
n
 =Öos->
√xt
; 1; }); \

370 
pos
 = 
n
)

	)

	@main.c

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~"av…ªe.h
"

6 
	~"toﬁ.h
"

8 
	$maö
(
¨gc
, *
¨gv
[])

10 
AvlTªe
 
T
;

11 
EÀmítTy≥
 
A
[] = {2, 1, 4, 5, 9, 3, 6, 7};

12 
i
;

14 
T
 = 
	`MakeEm±y
(
NULL
);

15 
i
 = 0; i < 
	`NELEMS
(
A
); ++i) {

17 
T
 = 
	`Lo›In£π
(
A
[
i
], T);

20 
	`CompuãDi°AndDïth
(
T
);

21 
	`VPrötAvlTªe
(
T
);

22 
	`HPrötAvlTªe
(
T
);

23 
	`¥ötf
("Mö i†%d, Max i†%d\n", 
	`Rërõve
(
	`FödMö
(
T
)), Rërõve(
	`FödMax
(T)));

26 
	}
}

30 
	$maö
(
¨gc
, *
¨gv
[])

32 
AvlTªe
 
T
;

33 
i
, 
ƒ
;

34 *
A
;

36 i‡(
¨gc
 < 2) {

37 
	`¥ötf
("Usage: ./test <NUM>\n");

41 i‡((
ƒ
 = 
	`°πoul
(
¨gv
[1], 
NULL
, 0)) <= 0) {

42 
	`¥ötf
("NUM must be greatÅhan 0\n");

46 i‡(!(
A
 = 
	`mÆloc
((Ë* 
ƒ
))) {

47 
	`¥ötf
("malloc failed\n");

51 
i
 = 0; i < 
ƒ
; ++i)

52 
A
[
i
] = i;

53 
	`shufÊe
(
A
, 
ƒ
);

55 
T
 = 
	`MakeEm±y
–
NULL
 );

56  
i
 = 0; i < 
ƒ
; ++i)

57 
T
 = 
	`In£π
(
A
[
i
], T);

59 
	`CompuãDi°AndDïth
(
T
);

60 
	`HPrötAvlTªe
(
T
);

61 
	`¥ötf
–"Mö i†%d, Max i†%d\n", 
	`Rërõve
–
	`FödMö
–
T
 ) ),

62 
	`Rërõve
–
	`FödMax
–
T
 ) ) );

64 
	`shufÊe
(
A
, 
ƒ
);

65 
i
 = 0; i < 
ƒ
; ++i) {

66 
	`¥ötf
("Dñëög %d\n", 
A
[
i
]);

67 
T
 = 
	`Dñëe
(
A
[
i
], T);

68 
	`CompuãDi°AndDïth
(
T
);

69 
	`HPrötAvlTªe
(
T
);

73 
	}
}

	@que.c

8 
	~"que.h
"

10 
	$que_öô
(
que_t
 *
q
, *
«me
, 
öt32_t
 
off£t
)

12 
q
->
ƒ
 = 0;

13 
q
->
off£t
 = offset;

14 
	`INIT_LIST_HEAD
(&
q
->
hód
);

17 
	}
}

19 
	$íqueue
(
que_t
 *
q
, *
obj
)

21 
li°_hód_t
 *
pos
;

23 
pos
 = (
li°_hód_t
 *)(
obj
 + 
q
->
off£t
);

24 
	`li°_add_èû
(
pos
, &
q
->
hód
);

25 ++
q
->
ƒ
;

28 
	}
}

30 * 
	$dequeue
(
que_t
 *
q
)

32 
uöt32_t
 
˝u_§
;

33 *
obj
;

35 i‡(
	`li°_em±y
(&
q
->
hód
))

36  
NULL
;

38 
obj
 = (*)((*)
q
->
hód
.
√xt
 - q->
off£t
);

39 
	`li°_dñ
(
q
->
hód
.
√xt
);

40 --
q
->
ƒ
;

42  
obj
;

43 
	}
}

	@que.h

8 #i‚de‡
__QUE_H__


9 
	#__QUE_H__


	)

11 
	~"ty≥s.h
"

12 
	~"li°.h
"

14 
	sque_s
 {

15 
öt32_t
 
	mƒ
;

16 
öt32_t
 
	moff£t
;

17 
öt32_t
 
	mthd
;

18 
li°_hód
 
	mhód
;

19 } 
	tque_t
;

21 
que_öô
(
que_t
 *
q
, *
«me
, 
öt32_t
 
off£t
);

22 
íqueue
(
que_t
 *
q
, *
obj
);

23 * 
dequeue
(
que_t
 *
q
);

	@stack.c

8 
	~"°ack.h
"

10 
	$°ack_öô
(
°ack_t
 *
s
, *
«me
, 
öt32_t
 
off£t
)

12 
s
->
«me
 =Çame;

13 
s
->
ƒ
 = 0;

14 
s
->
off£t
 = offset;

15 
	`INIT_LIST_HEAD
(&
s
->
hód
);

18 
	}
}

20 
	$push
(
°ack_t
 *
s
, *
obj
)

22 
li°_hód_t
 *
pos
;

24 
pos
 = (
li°_hód_t
 *)(
obj
 + 
s
->
off£t
);

25 
	`li°_add
(
pos
, &
s
->
hód
);

26 ++
s
->
ƒ
;

29 
	}
}

31 * 
	$p›
(
°ack_t
 *
s
)

33 *
obj
;

35 i‡(
	`li°_em±y
(&
s
->
hód
))

36  
NULL
;

38 
obj
 = (*)((*)
s
->
hód
.
√xt
 - s->
off£t
);

39 
	`li°_dñ
(
s
->
hód
.
√xt
);

40 --
s
->
ƒ
;

42  
obj
;

43 
	}
}

	@stack.h

7 #i‚de‡
__STACK_H__


8 
	#__STACK_H__


	)

10 
	~"ty≥s.h
"

11 
	~"li°.h
"

13 
	s°ack_s
 {

14 *
	m«me
;

15 
öt32_t
 
	mƒ
;

16 
öt32_t
 
	moff£t
;

17 
öt32_t
 
	mthd
;

18 
li°_hód_t
 
	mhód
;

19 } 
	t°ack_t
;

21 
°ack_öô
(
°ack_t
 *
s
, *
«me
, 
öt32_t
 
off£t
);

22 
push
(
°ack_t
 *
s
, *
obj
);

23 * 
p›
(
°ack_t
 *
s
);

	@testavl.c

1 
	~"av…ªe.h
"

2 
	~<°dio.h
>

4 
	$maö
( )

6 
AvlTªe
 
T
;

7 
Posôi⁄
 
P
;

8 
i
;

9 
j
 = 0;

11 
T
 = 
	`MakeEm±y
–
NULL
 );

12  
i
 = 0; i < 50; i++, 
j
 = ( j + 7 ) % 50 )

13 
T
 = 
	`In£π
–
j
, T );

14  
i
 = 0; i < 50; i++ )

15 if––
P
 = 
	`Föd
–
i
, 
T
 ) ) =
NULL
 || 
	`Rërõve
( P ) != i )

16 
	`¥ötf
–"Eº‹áà%d\n", 
i
 );

28 
	`PrötAvlTªe
–
T
 );

29 
	`¥ötf
–"Mö i†%d, Max i†%d\n", 
	`Rërõve
–
	`FödMö
–
T
 ) ),

30 
	`Rërõve
–
	`FödMax
–
T
 ) ) );

33 
	}
}

	@tool.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<time.h
>

5 
	#MAX_NR
 (1000)

	)

7 
¥öt_¨øy
(
v
[], 
n
);

9 
	$sw≠
(
v
[], 
i
, 
j
)

11 
tmp
;

13 
tmp
 = 
v
[
i
];

14 
v
[
i
] = v[
j
];

15 
v
[
j
] = 
tmp
;

16 
	}
}

18 
	$qqs‹t
(
v
[], 
À·
, 
right
)

20 
i
, 
œ°
;

22 i‡(
À·
 >
right
)

25 
	`sw≠
(
v
, 
À·
, (À· + 
right
)/2);

26 
œ°
 = 
À·
;

28 
i
 = 
À·
 + 1; i <
right
; i++)

29 i‡(
v
[
i
] < v[
À·
])

30 
	`sw≠
(
v
, ++
œ°
, 
i
);

32 
	`sw≠
(
v
, 
À·
, 
œ°
);

33 
	`qqs‹t
(
v
, 
À·
, 
œ°
-1);

34 
	`qqs‹t
(
v
, 
œ°
+1, 
right
);

35 
	}
}

37 
	$¥öt_¨øy
(
v
[], 
n
)

39 
i
;

41 
i
 = 0; i < 
n
; ++i)

42 
	`¥ötf
("%d ", 
v
[
i
]);

43 
	`¥ötf
("\n");

44 
	}
}

46 
	$shufÊe
(
v
[], 
n
)

48 
i
, 
j
;

50 
	`§™d
(
	`time
(
NULL
));

52 
i
 = 0; i < 
n
; ++i)

53 
	`sw≠
(
v
, 
i
, 
	`ønd
(Ë% 
n
);

54 
	}
}

	@tool.h

1 #i‚de‡
__TOOL_H__


3 
	#NELEMS
(
¨øy
Ë(◊ºayË/ ◊ºay[0]))

	)

5 
¥öt_¨øy
(
v
[], 
n
);

6 
sw≠
(
v
[], 
i
, 
j
);

7 
qqs‹t
(
v
[], 
À·
, 
right
);

8 
¥öt_¨øy
(
v
[], 
n
);

9 
shufÊe
(
v
[], 
n
);

	@tree.c

10 
	~<°dlib.h
>

11 
	~<m©h.h
>

12 
	~<as£π.h
>

13 
	~<°rög.h
>

14 
	~"ty≥s.h
"

15 
	~"que.h
"

16 
	~"åì.h
"

18 
	såì_node_s
 {

19 
li°_hód_t
 
	mli°
;

20 
ñemít_t
 
	me
;

21 
uöt32_t
 
	mÀvñ
;

22 
	#DIST_MAX
 (100)

	)

23 
uöt32_t
 
	mdi°
;

24 
£¨ch_åì_t
 *
	mÀ·
;

25 
£¨ch_åì_t
 *
	mright
;

26 } 
	tåì_node_t
;

28 
£¨ch_åì_t
 * 
	$make_em±y
(
£¨ch_åì_t
 * 
t
)

30 i‡(
t
) {

31 
	`make_em±y
(
t
->
À·
);

32 
	`make_em±y
(
t
->
right
);

33 
	`‰ì
(
t
);

36  
NULL
;

37 
	}
}

61 
posôi⁄_t
 * 
	$föd
(
ñemít_t
 
e
, 
£¨ch_åì_t
 * 
t
)

63 i‡(!
t
)

64  
NULL
;

65 i‡(
e
 < 
t
->e)

66  
	`föd
(
e
, 
t
->
À·
);

67 i‡(
e
 > 
t
->e)

68  
	`föd
(
e
, 
t
->
right
);

70  
t
;

71 
	}
}

92 
posôi⁄_t
 * 
	$föd_mö
(
£¨ch_åì_t
 * 
t
)

94 i‡(!
t
)

95  
NULL
;

96 i‡(!
t
->
À·
)

97  
t
;

99  
	`föd_mö
(
t
->
À·
);

100 
	}
}

102 
posôi⁄_t
 * 
	$föd_max
(
£¨ch_åì_t
 * 
t
)

104 i‡(
t
) {

105 
t
->
right
)

106 
t
 =Å->
right
;

109  
t
;

110 
	}
}

112 
£¨ch_åì_t
 * 
	$__ö£π
(
ñemít_t
 
e
, 
uöt32_t
 
Àvñ
, uöt32_à
di°
, 
£¨ch_åì_t
 * 
t
)

114 i‡(!
t
) {

115 i‡(!(
t
 = 
	`mÆloc
((
åì_node_t
)))) {

116 
	`¥ötf
("malloc failed\n");

117  
NULL
;

120 
t
->
e
 =É;

121 
t
->
À·
 =Å->
right
 = 
NULL
;

122 
t
->
Àvñ
 =Üevel;

123 
t
->
di°
 = dist;

124 } i‡(
e
 < 
t
->e) {

125 
t
->
À·
 = 
	`__ö£π
(
e
, 
Àvñ
+1, 
di°
 - 
	`round
(
DIST_MAX
/
	`pow
(2,Üevel)),Å->left);

126 } i‡(
e
 > 
t
->e) {

127 
t
->
right
 = 
	`__ö£π
(
e
, 
Àvñ
+1, 
di°
 + 
	`round
(
DIST_MAX
/
	`pow
(2,Üevel)),Å->right);

132  
t
;

133 
	}
}

135 
£¨ch_åì_t
 * 
	$ö£π
(
ñemít_t
 
e
, 
£¨ch_åì_t
 * 
t
)

137  
	`__ö£π
(
e
, 1, 
DIST_MAX
, 
t
);

138 
	}
}

140 
£¨ch_åì_t
 * 
	$dñëe
(
ñemít_t
 
e
, 
£¨ch_åì_t
 * 
t
)

142 
posôi⁄_t
 * 
tmp˚Œ
;

144 i‡(!
t
) {

145 
	`¥ötf
("ñemíà%dÇŸ found\n", 
e
);

146  
t
;

147 } i‡(
e
 < 
t
->e) {

148 
t
->
À·
 = 
	`dñëe
(
e
,Å->left);

149 } i‡(
e
 > 
t
->e) {

150 
t
->
right
 = 
	`dñëe
(
e
,Å->right);

151 } i‡(
t
->
À·
 &&Å->
right
) {

152 
tmp˚Œ
 = 
	`föd_mö
(
t
->
right
);

153 
t
->
e
 = 
tmp˚Œ
->e;

154 
t
->
right
 = 
	`dñëe
—->
e
,Å->right);

156 
tmp˚Œ
 = 
t
;

157 i‡(!
t
->
À·
)

158 
t
 =Å->
right
;

159 i‡(!
t
->
right
)

160 
t
 =Å->
À·
;

161 
	`‰ì
(
tmp˚Œ
);

164  
t
;

165 
	}
}

168 
ölöe
 
	$¥öt_e
(
£¨ch_åì_t
 * 
t
, 
öt32_t
 
dïth
)

170 
öt32_t
 
i
;

172 
i
 = 0; i < 
dïth
; ++i)

173 
	`¥ötf
("\t");

174 
	`¥ötf
("(%s|%d|%d)%d\n",

175 (
t
->
pos
 =
ROOT
Ë? "roŸ" : (t->po†=
LEFT
) ? "left" : "right",

176 
t
->
di°
,

177 
t
->
Àvñ
,

178 
t
->
e
);

181 
	}
}

183 
ölöe
 
	$¥öt
(
£¨ch_åì_t
 * 
t
, 
öt32_t
 
dïth
)

185 i‡(
t
) {

186 
	`¥öt_e
(
t
, 
dïth
);

187 
	`¥öt
(
t
->
À·
, 
dïth
+1);

188 
	`¥öt
(
t
->
right
, 
dïth
+1);

192 
	}
}

194 
	$¥öt_åì
(
£¨ch_åì_t
 * 
t
)

196 
	`¥öt
(
t
, 0);

197 
	}
}

200 
öt32_t
 
	gLEVEL
 = 0;

201 
öt32_t
 
	gDIST
 = 0;

202 
	gBUF
[1024] = {0};

203 
öt32_t
 
	gBUF_POS
 = 0;

205 
	$¥öt_e
(
£¨ch_åì_t
 *
t
)

207 
öt32_t
 
i
;

208 
öt32_t
 
À·_pos
, 
right_pos
;

210 i‡(
t
->
Àvñ
 !
LEVEL
) {

211 
DIST
 = 
t
->
di°
;

212 
	`¥ötf
("\n");

213 
i
 = 0; i < 
BUF_POS
; ++i) {

214 
	`¥ötf
("%c", 
BUF
[
i
]);

216 
	`¥ötf
("\n");

218 
	`mem£t
(
BUF
, 0, (BUF));

219 
BUF_POS
 = 0;

221 
DIST
 = 
t
->
di°
 - DIST - 1;

224 
i
 = 0; i < 
DIST
; ++i)

225 
	`¥ötf
(" ");

227 
DIST
 = 
t
->
di°
;

228 
LEVEL
 = 
t
->
Àvñ
;

230 
	`¥ötf
("%d", 
t
->
e
);

232 
À·_pos
 = 
t
->
di°
 - 
	`round
(
DIST_MAX
/
	`pow
(2,Å->
Àvñ
));

233 
right_pos
 = 
t
->
di°
 + 
	`round
(
DIST_MAX
/
	`pow
(2,Å->
Àvñ
));

235 i‡(
t
->
À·
 && !t->
right
) {

236  ; 
BUF_POS
 < 
À·_pos
; ++BUF_POS) {

237 
BUF
[
BUF_POS
] = ' ';

239 
BUF
[
BUF_POS
++] = '/';

240  ; 
BUF_POS
 < 
t
->
di°
; ++BUF_POS) {

241 
BUF
[
BUF_POS
] = '-';

243 
BUF
[
BUF_POS
++] = '|';

244 } i‡(!
t
->
À·
 &&Å->
right
) {

245  ; 
BUF_POS
 < 
t
->
di°
; ++BUF_POS) {

246 
BUF
[
BUF_POS
] = ' ';

248 
BUF
[
BUF_POS
++] = '|';

249  ; 
BUF_POS
 < 
right_pos
; ++BUF_POS) {

250 
BUF
[
BUF_POS
] = '-';

252 
BUF
[
BUF_POS
++] = '\\';

253 } i‡(
t
->
À·
 &&Å->
right
) {

254  ; 
BUF_POS
 < 
À·_pos
; ++BUF_POS) {

255 
BUF
[
BUF_POS
] = ' ';

257 
BUF
[
BUF_POS
++] = '/';

258  ; 
BUF_POS
 < 
t
->
di°
; ++BUF_POS) {

259 
BUF
[
BUF_POS
] = '-';

261 
BUF
[
BUF_POS
++] = '|';

262  ; 
BUF_POS
 < 
right_pos
; ++BUF_POS) {

263 
BUF
[
BUF_POS
] = '-';

265 
BUF
[
BUF_POS
++] = '\\';

269 
	}
}

271 
	$¥öt_åì
(
£¨ch_åì_t
 * 
t
)

273 
que_t
 
que
;

275 i‡(!
t
)

278 
	`que_öô
(&
que
, "åì que", 
	`off£t_of
(
åì_node_t
, 
li°
));

279 
	`íqueue
(&
que
, 
t
);

281 (
t
 = 
	`dequeue
(&
que
))) {

282 
	`¥öt_e
(
t
);

283 i‡(
t
->
À·
)

284 
	`íqueue
(&
que
, 
t
->
À·
);

285 i‡(
t
->
right
)

286 
	`íqueue
(&
que
, 
t
->
right
);

289 
	`¥ötf
("\n");

292 
	}
}

	@tree.h

1 #i‚de‡
__TREE_H__


2 
	#__TREE_H__


	)

4 
	~"ty≥s.h
"

6 
uöt32_t
 
	tñemít_t
;

7 
	gåì_node_s
;

10 
åì_node_s
 
	tposôi⁄_t
;

11 
åì_node_s
 
	t£¨ch_åì_t
;

13 
£¨ch_åì_t
 * 
make_em±y
(£¨ch_åì_à* 
t
);

14 
posôi⁄_t
 * 
föd
(
ñemít_t
 
e
, 
£¨ch_åì_t
 * 
t
);

15 
posôi⁄_t
 * 
föd_mö
(
£¨ch_åì_t
 * 
t
);

16 
posôi⁄_t
 * 
föd_max
(
£¨ch_åì_t
 * 
t
);

17 
£¨ch_åì_t
 * 
ö£π
(
ñemít_t
 
e
, sórch_åì_à* 
t
);

18 
£¨ch_åì_t
 * 
dñëe
(
ñemít_t
 
e
, sórch_åì_à* 
t
);

19 
¥öt_åì
(
£¨ch_åì_t
 * 
t
);

	@types.h

10 #i‚de‡
_TYPES_H


11 
	#_TYPES_H


	)

14 
	tBOOLEAN
;

15 
	tINT8U
;

16 sig√d 
	tINT8S
;

17 
	tINT16U
;

18 sig√d 
	tINT16S
;

19 
	tINT32U
;

20 sig√d 
	tINT32S
;

21 
	tFP32
;

22 
	tFP64
;

24 
	tINT64S
;

25 
	tINT64U
;

28 
	tul⁄g_t
;

29 
	tuöt32_t
;

30 
	tuöt16_t
;

31 
	tuöt8_t
;

34 
	tl⁄g_t
;

35 
	töt32_t
;

36 
	töt16_t
;

37 sig√d 
	töt8_t
;

40 
	#ht⁄s
(
n
Ë((
uöt16_t
)((“Ë& 0xffË<< 8Ë| ((“Ë& 0xff00Ë>> 8))

	)

41 
	#ht⁄l
(
n
Ë((
uöt32_t
)( \

42 (((
uöt32_t
)(
n
) & (uint32_t)0x000000ffUL) << 24) | \

43 (((
uöt32_t
)(
n
) & (uint32_t)0x0000ff00UL) << 8) | \

44 (((
uöt32_t
)(
n
) & (uint32_t)0x00ff0000UL) >> 8) | \

45 (((
uöt32_t
)(
n
Ë& (uöt32_t)0xff000000ULË>> 24)))

	)

46 
	#¡ohs
(
n
Ë
	`ht⁄s
“)

	)

47 
	#¡ohl
(
n
Ë
	`ht⁄l
“)

	)

50 
	#__i§__


	)

51 
	#__∂c_wq__


	)

52 
	#__tmr__


	)

55 
	#DISPLAY_MSG
 0

	)

57 
	#DISABLE
 0

	)

58 
	#ENABLE
 1

	)

60 
	#MAX
(
a
,
b
Ë(◊Ë>(bË? (aË: (b))

	)

61 
	#MIN
(
a
,
b
Ë(◊Ë<(bË? (aË: (b))

	)

62 
	#US_SWAP
(
a
Ë(◊Ë(
INT16U
)(((INT16U)◊Ë>> 8Ë| ((INT16U)◊Ë<< 8)))

	)

63 
	#mod_˚ûög
(
a
, 
b
Ë((◊Ë+ (bË- 1Ë/ (b))

	)

64 
	#mod_Êo‹
(
a
, 
b
Ë(◊Ë/ (b))

	)

66 #i‚de‡
NULL


67 
	#NULL
 0

	)

70 #i‚de‡
TRUE


71 
	#TRUE
 (1 =1)

	)

74 #i‚de‡
FALSE


75 
	#FALSE
 (!
TRUE
)

	)

78 #i‚de‡
OK


79 
	#OK
 0

	)

82 #i‚de‡
ERROR


83 
	#ERROR
 -1

	)

86 
__ölöe__
 
	$•lô_wrôe_two
(
uöt8_t
 *
addr
, 
uöt16_t
 
two
, uöt8_à
ídün
)

88 
uöt8_t
 
byã0
, 
byã1
;

90 
byã0
 = (
two
 & 0xff);

91 
byã1
 = (
two
 & 0xff00) >> 8;

93 i‡(
ídün
) {

94 *
addr
 = 
byã1
;

95 *(
addr
+1Ë
byã0
;

97 *
addr
 = 
byã0
;

98 *(
addr
+1Ë
byã1
;

102 
	}
}

104 
	#•lô_ªad_two
(
addr
, 
ídün
) \

105 ((
ídün
) ? \

106 (
uöt16_t
)((*(
addr
) << 8) | (*(addr+1))) : \

107 (
uöt16_t
)((*(
addr
)Ë| (*◊ddr+1Ë<< 8)))

	)

109 
__ölöe__
 
	$•lô_wrôe_four
(
uöt8_t
 *
addr
, 
uöt32_t
 
four
, uöt8_à
ídün
)

111 
uöt8_t
 
byã0
, 
byã1
, 
byã2
, 
byã3
;

113 
byã0
 = (
four
 & 0xff);

114 
byã1
 = (
four
 & 0xff00) >> 8;

115 
byã2
 = (
four
 & 0xff0000) >> 16;

116 
byã3
 = (
four
 & 0xff000000) >> 24;

118 i‡(
ídün
) {

119 *
addr
 = 
byã3
;

120 *(
addr
+1Ë
byã2
;

121 *(
addr
+2Ë
byã1
;

122 *(
addr
+3Ë
byã0
;

124 *
addr
 = 
byã0
;

125 *(
addr
+1Ë
byã1
;

126 *(
addr
+2Ë
byã2
;

127 *(
addr
+3Ë
byã3
;

130 
	}
}

133 
	#•lô_ªad_four
(
addr
, 
ídün
) \

134 ((
ídün
) ? \

135 (
uöt32_t
)((*(
addr
) << 24) | (*(addr+1) << 16) | (*(addr+2) << 8) | (*(addr+3))) : \

136 (
uöt32_t
)((*(
addr
)Ë| (*◊ddr+1Ë<< 8Ë| (*◊ddr+2Ë<< 16Ë| (*◊ddr+3Ë<< 24)))

	)

	@
1
.
0
15
116
avltree.c
avltree.h
fatal.h
list.h
main.c
que.c
que.h
stack.c
stack.h
testavl.c
tool.c
tool.h
tree.c
tree.h
types.h
