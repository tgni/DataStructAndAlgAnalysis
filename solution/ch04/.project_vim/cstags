cscope 15 $HOME/Workspace/ds_ana/solution/ch04 -q 0000000156 0000019640
	@avltree.c

1 
	~"av…ªe.h
"

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<m©h.h
>

5 
	~"Áèl.h
"

6 
	~"que.h
"

7 
	~"°ack.h
"

9 
	#DIST_MAX
 (100)

	)

11 
	sAvlNode


13 
li°_hód_t
 
	mLi°
;

15 
	mHeight
;

16 
	mDi°
;

17 
	mDïth
;

19 
EÀmítTy≥
 
	mEÀmít
;

20 
AvlTªe
 
	mLe·
;

21 
AvlTªe
 
	mRight
;

22 } 
	tAvlNode_t
;

24 
AvlTªe
 
	$MakeEm±y
–
AvlTªe
 
T
 )

26 if–
T
 !
NULL
 )

28 
	`MakeEm±y
–
T
->
Le·
 );

29 
	`MakeEm±y
–
T
->
Right
 );

30 
	`‰ì
–
T
 );

32  
NULL
;

33 
	}
}

35 
Posôi⁄
 
	$Föd
–
EÀmítTy≥
 
X
, 
AvlTªe
 
T
 )

37 if–
T
 =
NULL
 )

38  
NULL
;

39 if–
X
 < 
T
->
EÀmít
 )

40  
	`Föd
–
X
, 
T
->
Le·
 );

42 if–
X
 > 
T
->
EÀmít
 )

43  
	`Föd
–
X
, 
T
->
Right
 );

45  
T
;

46 
	}
}

48 
Posôi⁄
 
	$FödMö
–
AvlTªe
 
T
 )

50 if–
T
 =
NULL
 )

51  
NULL
;

53 if–
T
->
Le·
 =
NULL
 )

54  
T
;

56  
	`FödMö
–
T
->
Le·
 );

57 
	}
}

59 
Posôi⁄
 
	$FödMax
–
AvlTªe
 
T
 )

61 if–
T
 !
NULL
 )

62  
T
->
Right
 !
NULL
 )

63 
T
 = T->
Right
;

65  
T
;

66 
	}
}

68 
	$Height
–
Posôi⁄
 
P
 )

70 if–
P
 =
NULL
 )

73  
P
->
Height
;

74 
	}
}

76 
	$Max
–
Lhs
, 
Rhs
 )

78  
Lhs
 > 
Rhs
 ? Lhs : Rhs;

79 
	}
}

90 
Posôi⁄
 
	$SögÀRŸ©eWôhLe·
–
Posôi⁄
 
K2
 )

92 
Posôi⁄
 
K1
;

94 
K1
 = 
K2
->
Le·
;

95 
K2
->
Le·
 = 
K1
->
Right
;

96 
K1
->
Right
 = 
K2
;

98 
K2
->
Height
 = 
	`Max
–
	`Height
–K2->
Le·
 ), Height–K2->
Right
 ) ) + 1;

99 
K1
->
Height
 = 
	`Max
–
	`Height
–K1->
Le·
 ), 
K2
->Height ) + 1;

101  
K1
;

102 
	}
}

113 
Posôi⁄
 
	$SögÀRŸ©eWôhRight
–
Posôi⁄
 
K1
 )

115 
Posôi⁄
 
K2
;

117 
K2
 = 
K1
->
Right
;

118 
K1
->
Right
 = 
K2
->
Le·
;

119 
K2
->
Le·
 = 
K1
;

121 
K1
->
Height
 = 
	`Max
–
	`Height
–K1->
Le·
 ), Height–K1->
Right
 ) ) + 1;

122 
K2
->
Height
 = 
	`Max
–
	`Height
–K2->
Right
 ), 
K1
->Height ) + 1;

124  
K2
;

125 
	}
}

139 
Posôi⁄
 
	$DoubÀRŸ©eWôhLe·
–
Posôi⁄
 
K3
 )

142 
K3
->
Le·
 = 
	`SögÀRŸ©eWôhRight
( K3->Left );

145  
	`SögÀRŸ©eWôhLe·
–
K3
 );

146 
	}
}

160 
Posôi⁄
 
	$DoubÀRŸ©eWôhRight
–
Posôi⁄
 
K1
 )

163 
K1
->
Right
 = 
	`SögÀRŸ©eWôhLe·
( K1->Right );

166  
	`SögÀRŸ©eWôhRight
–
K1
 );

167 
	}
}

170 
AvlTªe
 
	$In£π
–
EÀmítTy≥
 
X
, 
AvlTªe
 
T
 )

172 if–
T
 =
NULL
 )

175 
T
 = 
	`mÆloc
––
AvlNode
 ) );

176 if–
T
 =
NULL
 )

177 
	`F©ÆEº‹
( "Out of space!!!" );

180 
T
->
EÀmít
 = 
X
; T->
Height
 = 0;

181 
T
->
Le·
 = T->
Right
 = 
NULL
;

186 if–
X
 < 
T
->
EÀmít
 )

188 
T
->
Le·
 = 
	`In£π
–
X
, T->Left );

189 i‡–
	`Height
–
T
->
Le·
 ) - Height–T->
Right
 ) == 2 ) {

190 if–
X
 < 
T
->
Le·
->
EÀmít
 )

191 
T
 = 
	`SögÀRŸ©eWôhLe·
( T );

193 
T
 = 
	`DoubÀRŸ©eWôhLe·
( T );

198 if–
X
 > 
T
->
EÀmít
 )

200 
T
->
Right
 = 
	`In£π
–
X
, T->Right );

201 if–
	`Height
–
T
->
Right
 ) - Height–T->
Le·
 ) == 2 ) {

202 if–
X
 > 
T
->
Right
->
EÀmít
 )

203 
T
 = 
	`SögÀRŸ©eWôhRight
( T );

205 
T
 = 
	`DoubÀRŸ©eWôhRight
( T );

212 
T
->
Height
 = 
	`Max
–
	`Height
–T->
Le·
 ), Height–T->
Right
 ) ) + 1;

213  
T
;

214 
	}
}

216 
AvlTªe
 
	$Cª©eNewNode
(
EÀmítTy≥
 
X
)

218 
AvlTªe
 
T
;

220 i‡(!(
T
 = 
	`mÆloc
((
AvlNode
)))) {

221 
	`F©ÆEº‹
("Out of space!!!");

223 
T
->
EÀmít
 = 
X
; T->
Height
 = 0;

224 
T
->
Le·
 = T->
Right
 = 
NULL
;

227  
T
;

228 
	}
}

234 
AvlTªe
 
	$Lo›In£π
(
EÀmítTy≥
 
X
, 
AvlTªe
 
T
)

236 
°ack_t
 
S
;

237 
AvlTªe
 
P
, 
Q
;

238 
IsRŸ©e
 = 
FALSE
;

240 
	`°ack_öô
(&
S
, "ö£πi⁄Ö©h sèck", 
	`off£t_of
(
AvlNode_t
, 
Li°
));

242 
T
) {

243 i‡(
X
 < 
T
->
EÀmít
) {

244 
	`push
(&
S
, 
T
);

245 
T
 = T->
Le·
;

246 } i‡(
X
 > 
T
->
EÀmít
) {

247 
	`push
(&
S
, 
T
);

248 
T
 = T->
Right
;

254 i‡(
T
 =
NULL
) {

255 i‡(!(
T
 = 
	`mÆloc
((
AvlNode
)))) {

256 
	`F©ÆEº‹
("Out of space!!!");

257  
NULL
;

260 
T
->
EÀmít
 = 
X
; T->
Height
 = 0;

261 
T
->
Le·
 = T->
Right
 = 
NULL
;

262 i‡((
Q
 = 
	`p›
(&
S
))) {

263 i‡(
T
->
EÀmít
 < 
Q
->Element)

264 
Q
->
Le·
 = 
T
;

266 
Q
->
Right
 = 
T
;

267 
	`push
(&
S
, 
Q
);

269 
	`push
(&
S
, 
T
);

272 (
T
 = 
	`p›
(&
S
))) {

273 
T
->
Height
 = 
	`Max
(
	`Height
(T->
Le·
), Height(T->
Right
)) + 1;

274 i‡(
X
 < 
T
->
EÀmít
) {

275 i‡(
	`Height
(
T
->
Le·
Ë- Height(T->
Right
) == 2) {

276 i‡(
X
 < 
T
->
Le·
->
EÀmít
)

277 
T
 = 
	`SögÀRŸ©eWôhLe·
(T);

279 
T
 = 
	`DoubÀRŸ©eWôhLe·
(T);

280 
IsRŸ©e
 = 
TRUE
;

282 } i‡(
X
 > 
T
->
EÀmít
) {

283 i‡(
	`Height
(
T
->
Right
Ë- Height(T->
Le·
) == 2) {

284 if(
X
 > 
T
->
Right
->
EÀmít
)

285 
T
 = 
	`SögÀRŸ©eWôhRight
(T);

287 
T
 = 
	`DoubÀRŸ©eWôhRight
(T);

288 
IsRŸ©e
 = 
TRUE
;

291 i‡(
IsRŸ©e
 =
TRUE
) {

292 
IsRŸ©e
 = 
FALSE
;

293 i‡((
Q
 = 
	`p›
(&
S
))) {

294 i‡(
T
->
EÀmít
 < 
Q
->Element)

295 
Q
->
Le·
 = 
T
;

297 
Q
->
Right
 = 
T
;

298 
	`push
(&
S
, 
Q
);

301 
P
 = 
T
;

304  
P
;

305 
	}
}

308 
	$CompuãDi°AndDïth
–
AvlTªe
 
T
 )

310 
que_t
 
que
;

312 i‡(
T
 =
NULL
)

315 
	`que_öô
(&
que
, "av…ªêque", 
	`off£t_of
(
AvlNode_t
, 
Li°
));

317 
T
->
Di°
 = 
DIST_MAX
;

318 
T
->
Dïth
 = 0;

319 
	`íqueue
(&
que
, 
T
);

321 (
T
 = 
	`dequeue
(&
que
))) {

322 i‡(
T
->
Le·
) {

323 
T
->
Le·
->
Dïth
 = T->Depth + 1;

324 
T
->
Le·
->
Di°
 = T->Di° - 
	`round
(
DIST_MAX
/
	`pow
(2, T->Le·->
Dïth
));

325 
	`íqueue
(&
que
, 
T
->
Le·
);

327 i‡(
T
->
Right
) {

328 
T
->
Right
->
Dïth
 = T->Depth + 1;

329 
T
->
Right
->
Di°
 = T->Di° + 
	`round
(
DIST_MAX
/
	`pow
(2, T->Right->
Dïth
));

330 
	`íqueue
(&
que
, 
T
->
Right
);

333 
	}
}

336 
AvlTªe
 
	$Dñëe
–
EÀmítTy≥
 
X
, 
AvlTªe
 
T
 )

338 
Posôi⁄
 
TmpCñl
;

340 i‡(
T
 =
NULL
) {

341 
	`Eº‹
("ElementÇot found");

342  
T
;

345 i‡(
X
 < 
T
->
EÀmít
) {

346 
T
->
Le·
 = 
	`Dñëe
(
X
, T->Left);

347 i‡(
	`Height
(
T
->
Right
Ë- Height(T->
Le·
) == 2) {

348 i‡(
	`Height
(
T
->
Right
->RightË> Height(T->Right->
Le·
))

349 
T
 = 
	`SögÀRŸ©eWôhRight
(T);

351 
T
 = 
	`DoubÀRŸ©eWôhRight
(T);

353 } i‡(
X
 > 
T
->
EÀmít
) {

354 
T
->
Right
 = 
	`Dñëe
(
X
, T->Right);

355 i‡(
	`Height
(
T
->
Le·
Ë- Height(T->
Right
) == 2) {

356 i‡(
	`Height
(
T
->
Le·
->Le·Ë> Height(T->Le·->
Right
))

357 
T
 = 
	`SögÀRŸ©eWôhLe·
(T);

359 
T
 = 
	`DoubÀRŸ©eWôhLe·
(T);

361 } i‡(
T
->
Le·
 && T->
Right
) {

362 
TmpCñl
 = 
	`FödMö
(
T
->
Right
);

363 
T
->
EÀmít
 = 
TmpCñl
->Element;

364 
T
->
Right
 = 
	`Dñëe
(T->
EÀmít
, T->Right);

365 i‡(
	`Height
(
T
->
Le·
Ë- Height(T->
Right
) == 2) {

366 i‡(
	`Height
(
T
->
Le·
->Le·Ë> Height(T->Le·->
Right
))

367 
T
 = 
	`SögÀRŸ©eWôhLe·
(T);

369 
T
 = 
	`DoubÀRŸ©eWôhLe·
(T);

372 
TmpCñl
 = 
T
;

373 i‡(
T
->
Le·
 =
NULL
)

374 
T
 = T->
Right
;

375 i‡(
T
->
Right
 =
NULL
)

376 
T
 = T->
Le·
;

377 
	`‰ì
(
TmpCñl
);

380 i‡(
T
)

381 
T
->
Height
 = 
	`Max
(
	`Height
(T->
Le·
), Height(T->
Right
)) + 1;

383  
T
;

384 
	}
}

386 
EÀmítTy≥
 
	$Rërõve
–
Posôi⁄
 
P
 )

388  
P
->
EÀmít
;

389 
	}
}

392 
	#NR_DEPTH_MAX
 256

	)

393 
	g__LAST
[
NR_DEPTH_MAX
];

395 
	$li°_dú
(
AvlTªe
 
T
)

397 
i
;

399 
i
 = 0; i < 
T
->
Dïth
; ++i) {

400 i‡(
i
 =
T
->
Dïth
 - 1)

401 
	`¥ötf
("%s", 
__LAST
[
i
] ? "`-- " : "|-- ");

403 
	`¥ötf
("%s", 
__LAST
[
i
] ? " " : "| ");

405 
	`¥ötf
("%d\n", 
T
->
EÀmít
);

407 i‡(!
T
->
Le·
 && !T->
Right
) {

409 } i‡(
T
->
Le·
 && !T->
Right
) {

410 
__LAST
[
T
->
Dïth
] = 1;

411 
	`li°_dú
(
T
->
Le·
);

412 } i‡(!
T
->
Le·
 && T->
Right
) {

413 
__LAST
[
T
->
Dïth
] = 1;

414 
	`li°_dú
(
T
->
Right
);

416 
__LAST
[
T
->
Dïth
] = 0;

417 
	`li°_dú
(
T
->
Le·
);

418 
__LAST
[
T
->
Dïth
] = 1;

419 
	`li°_dú
(
T
->
Right
);

421 
	}
}

423 
	$VPrötAvlTªe
(
AvlTªe
 
T
)

425 i‡(
T
)

426 
	`li°_dú
(
T
);

427 
	}
}

429 
öt32_t
 
	gDEPTH
 = 0;

430 
öt32_t
 
	gDIST
 = 0;

431 
öt32_t
 
	gWIDTH
 = 0;

432 
	gBUF
[1024] = {0};

433 
öt32_t
 
	gBUF_POS
 = 0;

435 
ölöe
 
öt32_t
 
	$CompuãWidth
(
öt32_t
 
X
)

437 
öt32_t
 
width
 = 0;

439 i‡(
X
 < 0) {

440 
X
 = -X;

441 ++
width
;

444 ++
width
;

445 } (
X
 /= 10) > 0);

447  
width
;

448 
	}
}

450 
	$PrötNode
(
AvlTªe
 
T
)

452 
öt32_t
 
i
;

454 i‡(
T
->
Dïth
 !
DEPTH
) {

455 
	`¥ötf
("\n");

456 
DIST
 = 
T
->
Di°
;

457 
BUF
[
BUF_POS
++] = '\n';

458 
BUF
[
BUF_POS
] = '\0';

459 
	`¥ötf
("%s", 
BUF
);

461 
BUF_POS
 = 0;

463 
DIST
 = 
T
->
Di°
 - DIST - 
WIDTH
;

466 
i
 = 0; i < 
DIST
; ++i)

467 
	`¥ötf
(" ");

468 
	`¥ötf
("%d", 
T
->
EÀmít
);

470 
DIST
 = 
T
->
Di°
;

471 
DEPTH
 = 
T
->
Dïth
;

472 
WIDTH
 = 
	`CompuãWidth
(
T
->
EÀmít
);

474 i‡(
T
->
Le·
 && !T->
Right
) {

475  ; 
BUF_POS
 < 
T
->
Le·
->
Di°
; ++BUF_POS) {

476 
BUF
[
BUF_POS
] = ' ';

478 
BUF
[
BUF_POS
++] = '/';

479  ; 
BUF_POS
 < 
T
->
Di°
; ++BUF_POS) {

480 
BUF
[
BUF_POS
] = '-';

482 
BUF
[
BUF_POS
++] = '|';

483 } i‡(!
T
->
Le·
 && T->
Right
) {

484  ; 
BUF_POS
 < 
T
->
Di°
; ++BUF_POS) {

485 
BUF
[
BUF_POS
] = ' ';

487 
BUF
[
BUF_POS
++] = '|';

488  ; 
BUF_POS
 < 
T
->
Right
->
Di°
; ++BUF_POS) {

489 
BUF
[
BUF_POS
] = '-';

491 
BUF
[
BUF_POS
++] = '\\';

492 } i‡(
T
->
Le·
 && T->
Right
) {

493  ; 
BUF_POS
 < 
T
->
Le·
->
Di°
; ++BUF_POS) {

494 
BUF
[
BUF_POS
] = ' ';

496 
BUF
[
BUF_POS
++] = '/';

497  ; 
BUF_POS
 < 
T
->
Di°
; ++BUF_POS) {

498 
BUF
[
BUF_POS
] = '-';

500 
BUF
[
BUF_POS
++] = '|';

501  ; 
BUF_POS
 < 
T
->
Right
->
Di°
; ++BUF_POS) {

502 
BUF
[
BUF_POS
] = '-';

504 
BUF
[
BUF_POS
++] = '\\';

508 
	}
}

510 
	$HPrötAvlTªe
(
AvlTªe
 
T
)

512 
que_t
 
que
;

514 i‡(
T
 =
NULL
)

517 
	`que_öô
(&
que
, "av…ªêque", 
	`off£t_of
(
AvlNode_t
, 
Li°
));

518 
	`íqueue
(&
que
, 
T
);

520 (
T
 = 
	`dequeue
(&
que
))) {

521 
	`PrötNode
(
T
);

522 i‡(
T
->
Le·
)

523 
	`íqueue
(&
que
, 
T
->
Le·
);

524 i‡(
T
->
Right
)

525 
	`íqueue
(&
que
, 
T
->
Right
);

528 
	`¥ötf
("\n");

531 
	}
}

	@avltree.h

1 
	tEÀmítTy≥
;

3 #i‚de‡
_AvlTªe_H


4 
	#_AvlTªe_H


	)

6 
	gAvlNode
;

7 
AvlNode
 *
	tPosôi⁄
;

8 
AvlNode
 *
	tAvlTªe
;

10 
AvlTªe
 
MakeEm±y
–AvlTªê
T
 );

11 
Posôi⁄
 
Föd
–
EÀmítTy≥
 
X
, 
AvlTªe
 
T
 );

12 
Posôi⁄
 
FödMö
–
AvlTªe
 
T
 );

13 
Posôi⁄
 
FödMax
–
AvlTªe
 
T
 );

14 
AvlTªe
 
In£π
–
EÀmítTy≥
 
X
, AvlTªê
T
 );

15 
AvlTªe
 
Lo›In£π
–
EÀmítTy≥
 
X
, AvlTªê
T
 );

16 
AvlTªe
 
Dñëe
–
EÀmítTy≥
 
X
, AvlTªê
T
 );

17 
EÀmítTy≥
 
Rërõve
–
Posôi⁄
 
P
 );

18 
CompuãDi°AndDïth
–
AvlTªe
 
T
 );

19 
VPrötAvlTªe
(
AvlTªe
 
T
);

20 
HPrötAvlTªe
(
AvlTªe
 
T
);

	@fatal.h

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	#Eº‹
–
Så
 ) 
	`F©ÆEº‹
–Så )

	)

5 
	#F©ÆEº‹
–
Så
 ) 
	`Ârötf
–
°dîr
, "%s\n", Så ), 
	`exô
–1 )

	)

	@main.c

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~"av…ªe.h
"

6 
	~"toﬁ.h
"

8 
	$maö
(
¨gc
, *
¨gv
[])

10 
AvlTªe
 
T
;

11 
EÀmítTy≥
 
A
[] = {2, 1, 4, 5, 9, 3, 6, 7};

12 
i
;

14 
T
 = 
	`MakeEm±y
(
NULL
);

15 
i
 = 0; i < 
	`NELEMS
(
A
); ++i) {

17 
T
 = 
	`Lo›In£π
(
A
[
i
], T);

20 
	`CompuãDi°AndDïth
(
T
);

21 
	`VPrötAvlTªe
(
T
);

22 
	`HPrötAvlTªe
(
T
);

23 
	`¥ötf
("Mö i†%d, Max i†%d\n", 
	`Rërõve
(
	`FödMö
(
T
)), Rërõve(
	`FödMax
(T)));

26 
	}
}

30 
	$maö
(
¨gc
, *
¨gv
[])

32 
AvlTªe
 
T
;

33 
i
, 
ƒ
;

34 *
A
;

36 i‡(
¨gc
 < 2) {

37 
	`¥ötf
("Usage: ./test <NUM>\n");

41 i‡((
ƒ
 = 
	`°πoul
(
¨gv
[1], 
NULL
, 0)) <= 0) {

42 
	`¥ötf
("NUM must be greatÅhan 0\n");

46 i‡(!(
A
 = 
	`mÆloc
((Ë* 
ƒ
))) {

47 
	`¥ötf
("malloc failed\n");

51 
i
 = 0; i < 
ƒ
; ++i)

52 
A
[
i
] = i;

53 
	`shufÊe
(
A
, 
ƒ
);

55 
T
 = 
	`MakeEm±y
–
NULL
 );

56  
i
 = 0; i < 
ƒ
; ++i)

57 
T
 = 
	`In£π
(
A
[
i
], T);

59 
	`CompuãDi°AndDïth
(
T
);

60 
	`HPrötAvlTªe
(
T
);

61 
	`¥ötf
–"Mö i†%d, Max i†%d\n", 
	`Rërõve
–
	`FödMö
–
T
 ) ),

62 
	`Rërõve
–
	`FödMax
–
T
 ) ) );

64 
	`shufÊe
(
A
, 
ƒ
);

65 
i
 = 0; i < 
ƒ
; ++i) {

66 
	`¥ötf
("Dñëög %d\n", 
A
[
i
]);

67 
T
 = 
	`Dñëe
(
A
[
i
], T);

68 
	`CompuãDi°AndDïth
(
T
);

69 
	`HPrötAvlTªe
(
T
);

73 
	}
}

	@que.c

8 
	~"que.h
"

10 
	$que_öô
(
que_t
 *
q
, *
«me
, 
öt32_t
 
off£t
)

12 
q
->
ƒ
 = 0;

13 
q
->
off£t
 = offset;

14 
	`INIT_LIST_HEAD
(&
q
->
hód
);

17 
	}
}

19 
	$íqueue
(
que_t
 *
q
, *
obj
)

21 
li°_hód_t
 *
pos
;

23 
pos
 = (
li°_hód_t
 *)(
obj
 + 
q
->
off£t
);

24 
	`li°_add_èû
(
pos
, &
q
->
hód
);

25 ++
q
->
ƒ
;

28 
	}
}

30 * 
	$dequeue
(
que_t
 *
q
)

32 *
obj
;

34 i‡(
	`li°_em±y
(&
q
->
hód
))

35  
NULL
;

37 
obj
 = (*)((*)
q
->
hód
.
√xt
 - q->
off£t
);

38 
	`li°_dñ
(
q
->
hód
.
√xt
);

39 --
q
->
ƒ
;

41  
obj
;

42 
	}
}

	@que.h

8 #i‚de‡
__QUE_H__


9 
	#__QUE_H__


	)

11 
	~"ty≥s.h
"

12 
	~"li°.h
"

14 
	sque_s
 {

15 
öt32_t
 
	mƒ
;

16 
öt32_t
 
	moff£t
;

17 
öt32_t
 
	mthd
;

18 
li°_hód
 
	mhód
;

19 } 
	tque_t
;

21 
que_öô
(
que_t
 *
q
, *
«me
, 
öt32_t
 
off£t
);

22 
íqueue
(
que_t
 *
q
, *
obj
);

23 * 
dequeue
(
que_t
 *
q
);

	@stack.c

8 
	~"°ack.h
"

10 
	$°ack_öô
(
°ack_t
 *
s
, *
«me
, 
öt32_t
 
off£t
)

12 
s
->
«me
 =Çame;

13 
s
->
ƒ
 = 0;

14 
s
->
off£t
 = offset;

15 
	`INIT_LIST_HEAD
(&
s
->
hód
);

18 
	}
}

20 
	$push
(
°ack_t
 *
s
, *
obj
)

22 
li°_hód_t
 *
pos
;

24 
pos
 = (
li°_hód_t
 *)(
obj
 + 
s
->
off£t
);

25 
	`li°_add
(
pos
, &
s
->
hód
);

26 ++
s
->
ƒ
;

29 
	}
}

31 * 
	$p›
(
°ack_t
 *
s
)

33 *
obj
;

35 i‡(
	`li°_em±y
(&
s
->
hód
))

36  
NULL
;

38 
obj
 = (*)((*)
s
->
hód
.
√xt
 - s->
off£t
);

39 
	`li°_dñ
(
s
->
hód
.
√xt
);

40 --
s
->
ƒ
;

42  
obj
;

43 
	}
}

	@stack.h

7 #i‚de‡
__STACK_H__


8 
	#__STACK_H__


	)

10 
	~"ty≥s.h
"

11 
	~"li°.h
"

13 
	s°ack_s
 {

14 *
	m«me
;

15 
öt32_t
 
	mƒ
;

16 
öt32_t
 
	moff£t
;

17 
öt32_t
 
	mthd
;

18 
li°_hód_t
 
	mhód
;

19 } 
	t°ack_t
;

21 
°ack_öô
(
°ack_t
 *
s
, *
«me
, 
öt32_t
 
off£t
);

22 
push
(
°ack_t
 *
s
, *
obj
);

23 * 
p›
(
°ack_t
 *
s
);

	@testavl.c

1 
	~"av…ªe.h
"

2 
	~<°dio.h
>

4 
	$maö
( )

6 
AvlTªe
 
T
;

7 
Posôi⁄
 
P
;

8 
i
;

9 
j
 = 0;

11 
T
 = 
	`MakeEm±y
–
NULL
 );

12  
i
 = 0; i < 50; i++, 
j
 = ( j + 7 ) % 50 )

13 
T
 = 
	`In£π
–
j
, T );

14  
i
 = 0; i < 50; i++ )

15 if––
P
 = 
	`Föd
–
i
, 
T
 ) ) =
NULL
 || 
	`Rërõve
( P ) != i )

16 
	`¥ötf
–"Eº‹áà%d\n", 
i
 );

28 
	`PrötAvlTªe
–
T
 );

29 
	`¥ötf
–"Mö i†%d, Max i†%d\n", 
	`Rërõve
–
	`FödMö
–
T
 ) ),

30 
	`Rërõve
–
	`FödMax
–
T
 ) ) );

33 
	}
}

	@tree.c

10 
	~<°dlib.h
>

11 
	~<m©h.h
>

12 
	~<as£π.h
>

13 
	~<°rög.h
>

14 
	~"ty≥s.h
"

15 
	~"que.h
"

16 
	~"åì.h
"

18 
	såì_node_s
 {

19 
li°_hód_t
 
	mli°
;

20 
ñemít_t
 
	me
;

21 
uöt32_t
 
	mÀvñ
;

22 
	#DIST_MAX
 (100)

	)

23 
uöt32_t
 
	mdi°
;

24 
£¨ch_åì_t
 *
	mÀ·
;

25 
£¨ch_åì_t
 *
	mright
;

26 } 
	tåì_node_t
;

28 
£¨ch_åì_t
 * 
	$make_em±y
(
£¨ch_åì_t
 * 
t
)

30 i‡(
t
) {

31 
	`make_em±y
(
t
->
À·
);

32 
	`make_em±y
(
t
->
right
);

33 
	`‰ì
(
t
);

36  
NULL
;

37 
	}
}

61 
posôi⁄_t
 * 
	$föd
(
ñemít_t
 
e
, 
£¨ch_åì_t
 * 
t
)

63 i‡(!
t
)

64  
NULL
;

65 i‡(
e
 < 
t
->e)

66  
	`föd
(
e
, 
t
->
À·
);

67 i‡(
e
 > 
t
->e)

68  
	`föd
(
e
, 
t
->
right
);

70  
t
;

71 
	}
}

92 
posôi⁄_t
 * 
	$föd_mö
(
£¨ch_åì_t
 * 
t
)

94 i‡(!
t
)

95  
NULL
;

96 i‡(!
t
->
À·
)

97  
t
;

99  
	`föd_mö
(
t
->
À·
);

100 
	}
}

102 
posôi⁄_t
 * 
	$föd_max
(
£¨ch_åì_t
 * 
t
)

104 i‡(
t
) {

105 
t
->
right
)

106 
t
 =Å->
right
;

109  
t
;

110 
	}
}

112 
£¨ch_åì_t
 * 
	$__ö£π
(
ñemít_t
 
e
, 
uöt32_t
 
Àvñ
, uöt32_à
di°
, 
£¨ch_åì_t
 * 
t
)

114 i‡(!
t
) {

115 i‡(!(
t
 = 
	`mÆloc
((
åì_node_t
)))) {

116 
	`¥ötf
("malloc failed\n");

117  
NULL
;

120 
t
->
e
 =É;

121 
t
->
À·
 =Å->
right
 = 
NULL
;

122 
t
->
Àvñ
 =Üevel;

123 
t
->
di°
 = dist;

124 } i‡(
e
 < 
t
->e) {

125 
t
->
À·
 = 
	`__ö£π
(
e
, 
Àvñ
+1, 
di°
 - 
	`round
(
DIST_MAX
/
	`pow
(2,Üevel)),Å->left);

126 } i‡(
e
 > 
t
->e) {

127 
t
->
right
 = 
	`__ö£π
(
e
, 
Àvñ
+1, 
di°
 + 
	`round
(
DIST_MAX
/
	`pow
(2,Üevel)),Å->right);

132  
t
;

133 
	}
}

135 
£¨ch_åì_t
 * 
	$ö£π
(
ñemít_t
 
e
, 
£¨ch_åì_t
 * 
t
)

137  
	`__ö£π
(
e
, 1, 
DIST_MAX
, 
t
);

138 
	}
}

140 
£¨ch_åì_t
 * 
	$dñëe
(
ñemít_t
 
e
, 
£¨ch_åì_t
 * 
t
)

142 
posôi⁄_t
 * 
tmp˚Œ
;

144 i‡(!
t
) {

145 
	`¥ötf
("ñemíà%dÇŸ found\n", 
e
);

146  
t
;

147 } i‡(
e
 < 
t
->e) {

148 
t
->
À·
 = 
	`dñëe
(
e
,Å->left);

149 } i‡(
e
 > 
t
->e) {

150 
t
->
right
 = 
	`dñëe
(
e
,Å->right);

151 } i‡(
t
->
À·
 &&Å->
right
) {

152 
tmp˚Œ
 = 
	`föd_mö
(
t
->
right
);

153 
t
->
e
 = 
tmp˚Œ
->e;

154 
t
->
right
 = 
	`dñëe
—->
e
,Å->right);

156 
tmp˚Œ
 = 
t
;

157 i‡(!
t
->
À·
)

158 
t
 =Å->
right
;

159 i‡(!
t
->
right
)

160 
t
 =Å->
À·
;

161 
	`‰ì
(
tmp˚Œ
);

164  
t
;

165 
	}
}

168 
ölöe
 
	$¥öt_e
(
£¨ch_åì_t
 * 
t
, 
öt32_t
 
dïth
)

170 
öt32_t
 
i
;

172 
i
 = 0; i < 
dïth
; ++i)

173 
	`¥ötf
("\t");

174 
	`¥ötf
("(%s|%d|%d)%d\n",

175 (
t
->
pos
 =
ROOT
Ë? "roŸ" : (t->po†=
LEFT
) ? "left" : "right",

176 
t
->
di°
,

177 
t
->
Àvñ
,

178 
t
->
e
);

181 
	}
}

183 
ölöe
 
	$¥öt
(
£¨ch_åì_t
 * 
t
, 
öt32_t
 
dïth
)

185 i‡(
t
) {

186 
	`¥öt_e
(
t
, 
dïth
);

187 
	`¥öt
(
t
->
À·
, 
dïth
+1);

188 
	`¥öt
(
t
->
right
, 
dïth
+1);

192 
	}
}

194 
	$¥öt_åì
(
£¨ch_åì_t
 * 
t
)

196 
	`¥öt
(
t
, 0);

197 
	}
}

200 
öt32_t
 
	gLEVEL
 = 0;

201 
öt32_t
 
	gDIST
 = 0;

202 
	gBUF
[1024] = {0};

203 
öt32_t
 
	gBUF_POS
 = 0;

205 
	$¥öt_e
(
£¨ch_åì_t
 *
t
)

207 
öt32_t
 
i
;

208 
öt32_t
 
À·_pos
, 
right_pos
;

210 i‡(
t
->
Àvñ
 !
LEVEL
) {

211 
DIST
 = 
t
->
di°
;

212 
	`¥ötf
("\n");

213 
i
 = 0; i < 
BUF_POS
; ++i) {

214 
	`¥ötf
("%c", 
BUF
[
i
]);

216 
	`¥ötf
("\n");

218 
	`mem£t
(
BUF
, 0, (BUF));

219 
BUF_POS
 = 0;

221 
DIST
 = 
t
->
di°
 - DIST - 1;

224 
i
 = 0; i < 
DIST
; ++i)

225 
	`¥ötf
(" ");

227 
DIST
 = 
t
->
di°
;

228 
LEVEL
 = 
t
->
Àvñ
;

230 
	`¥ötf
("%d", 
t
->
e
);

232 
À·_pos
 = 
t
->
di°
 - 
	`round
(
DIST_MAX
/
	`pow
(2,Å->
Àvñ
));

233 
right_pos
 = 
t
->
di°
 + 
	`round
(
DIST_MAX
/
	`pow
(2,Å->
Àvñ
));

235 i‡(
t
->
À·
 && !t->
right
) {

236  ; 
BUF_POS
 < 
À·_pos
; ++BUF_POS) {

237 
BUF
[
BUF_POS
] = ' ';

239 
BUF
[
BUF_POS
++] = '/';

240  ; 
BUF_POS
 < 
t
->
di°
; ++BUF_POS) {

241 
BUF
[
BUF_POS
] = '-';

243 
BUF
[
BUF_POS
++] = '|';

244 } i‡(!
t
->
À·
 &&Å->
right
) {

245  ; 
BUF_POS
 < 
t
->
di°
; ++BUF_POS) {

246 
BUF
[
BUF_POS
] = ' ';

248 
BUF
[
BUF_POS
++] = '|';

249  ; 
BUF_POS
 < 
right_pos
; ++BUF_POS) {

250 
BUF
[
BUF_POS
] = '-';

252 
BUF
[
BUF_POS
++] = '\\';

253 } i‡(
t
->
À·
 &&Å->
right
) {

254  ; 
BUF_POS
 < 
À·_pos
; ++BUF_POS) {

255 
BUF
[
BUF_POS
] = ' ';

257 
BUF
[
BUF_POS
++] = '/';

258  ; 
BUF_POS
 < 
t
->
di°
; ++BUF_POS) {

259 
BUF
[
BUF_POS
] = '-';

261 
BUF
[
BUF_POS
++] = '|';

262  ; 
BUF_POS
 < 
right_pos
; ++BUF_POS) {

263 
BUF
[
BUF_POS
] = '-';

265 
BUF
[
BUF_POS
++] = '\\';

269 
	}
}

271 
	$¥öt_åì
(
£¨ch_åì_t
 * 
t
)

273 
que_t
 
que
;

275 i‡(!
t
)

278 
	`que_öô
(&
que
, "åì que", 
	`off£t_of
(
åì_node_t
, 
li°
));

279 
	`íqueue
(&
que
, 
t
);

281 (
t
 = 
	`dequeue
(&
que
))) {

282 
	`¥öt_e
(
t
);

283 i‡(
t
->
À·
)

284 
	`íqueue
(&
que
, 
t
->
À·
);

285 i‡(
t
->
right
)

286 
	`íqueue
(&
que
, 
t
->
right
);

289 
	`¥ötf
("\n");

292 
	}
}

	@tree.h

1 #i‚de‡
__TREE_H__


2 
	#__TREE_H__


	)

4 
	~"ty≥s.h
"

6 
uöt32_t
 
	tñemít_t
;

7 
	gåì_node_s
;

10 
åì_node_s
 
	tposôi⁄_t
;

11 
åì_node_s
 
	t£¨ch_åì_t
;

13 
£¨ch_åì_t
 * 
make_em±y
(£¨ch_åì_à* 
t
);

14 
posôi⁄_t
 * 
föd
(
ñemít_t
 
e
, 
£¨ch_åì_t
 * 
t
);

15 
posôi⁄_t
 * 
föd_mö
(
£¨ch_åì_t
 * 
t
);

16 
posôi⁄_t
 * 
föd_max
(
£¨ch_åì_t
 * 
t
);

17 
£¨ch_åì_t
 * 
ö£π
(
ñemít_t
 
e
, sórch_åì_à* 
t
);

18 
£¨ch_åì_t
 * 
dñëe
(
ñemít_t
 
e
, sórch_åì_à* 
t
);

19 
¥öt_åì
(
£¨ch_åì_t
 * 
t
);

	@
1
.
0
11
87
avltree.c
avltree.h
fatal.h
main.c
que.c
que.h
stack.c
stack.h
testavl.c
tree.c
tree.h
